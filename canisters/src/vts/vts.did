type AggregationInterval = variant { Weekly; Daily; Monthly };
type Agreement = record {
  id : nat;
  vehicles : vec record { principal; null };
  name : text;
  state : AgreementState;
  conditions : AgreementConditions;
  vh_provider : principal;
  vh_customer : principal;
};
type AgreementConditions = record { daily_usage_fee : text; gas_price : text };
type AgreementState = variant { Unsigned; Signed };
type Error = variant {
  InvalidSigner;
  Internal;
  InvalidSignatureFormat;
  InvalidSignature;
  NotFound;
  Unauthorized;
  AlreadyExists;
  DecodeTelemetry;
};
type Result = variant { Ok; Err : Error };
type Result_1 = variant { Ok : nat; Err : Error };
type Result_2 = variant { Ok : vec record { text; nat }; Err : Error };
type Result_3 = variant { Ok : principal; Err : Error };
type Result_4 = variant { Ok : User; Err : Error };
type Result_5 = variant { Ok : vec Agreement; Err : Error };
type Result_6 = variant { Ok : Vehicle; Err : Error };
type Result_7 = variant { Ok : vec record { principal; null }; Err : Error };
type TelemetryType = variant { Gas };
type User = record {
  agreements : vec record { nat; null };
  vehicles : vec record { principal; null };
};
type Vehicle = record {
  telemetry : vec record { TelemetryType; vec nat };
  public_key : blob;
  owner : principal;
  arch : text;
  agreement : opt nat;
  firmware : blob;
  identity : principal;
};
service : () -> {
  add_admin : (principal) -> (Result);
  clean_state : () -> ();
  create_agreement : (text, principal, text, text) -> (Result_1);
  delete_admin : (principal) -> (Result);
  delete_user : (principal) -> (Result);
  get_aggregated_telemetry : (principal, AggregationInterval) -> (
      Result_2,
    ) query;
  get_firmware_requests : () -> (Result_3) query;
  get_firmware_requests_by_user : () -> (Result) query;
  get_user : () -> (Result_4) query;
  get_user_agreements : () -> (Result_5) query;
  get_vehicle : (principal) -> (Result_6) query;
  get_vehicles_by_agreement : (nat) -> (Result_7) query;
  link_vehicle : (nat, principal) -> (Result);
  register_user : (principal) -> (Result);
  request_firmware : () -> (Result);
  sign_agreement : (nat) -> (Result);
  store_telemetry : (principal, blob, blob) -> (Result);
  upload_firmware : (principal, blob, text, blob) -> (Result);
}
