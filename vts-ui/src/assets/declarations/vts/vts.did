type Error = variant { InvalidSigner; Internal; NotFound; AlreadyExists };
type Result = variant { Ok : nat; Err : Error };
type Result_1 = variant { Ok : principal; Err : Error };
type Result_2 = variant { Ok; Err : Error };
type Result_3 = variant { Ok : User; Err : Error };
type Result_4 = variant { Ok : vec record { principal; null }; Err : Error };
type User = record { vehicles : vec record { principal; null } };
service : {
  create_agreement : (text, principal, text, text) -> (Result);
  get_firmware_requests : () -> (Result_1) query;
  get_firmware_requests_by_user : () -> (Result_2) query;
  get_user : () -> (Result_3) query;
  get_vehicles_by_agreement : (nat) -> (Result_4) query;
  link_vehicle : (nat, principal) -> (Result_2);
  request_firmware : () -> (Result_2);
  sign_agreement : (nat) -> (Result_2);
  upload_firmware : (principal, principal, text, blob) -> (Result_2);
}
